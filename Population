from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go

# Sample population data (static)
population_data = {
    'Country': ['China', 'India', 'USA', 'Indonesia', 'Pakistan', 
                'Brazil', 'Nigeria', 'Bangladesh', 'Russia', 'Mexico'],
    'Population_2023': [1425671352, 1428627663, 339996563, 277534122, 240485658,
                        216422446, 223804632, 172954319, 144444359, 128455567],
    'Population_2020': [1439323776, 1380004385, 331002651, 273523615, 220892340,
                        212559417, 206139589, 164689383, 145934462, 128932753],
    'Growth_Rate': [0.39, 1.01, 0.71, 1.07, 1.91,
                    0.72, 1.21, 1.03, -0.19, 0.54],
    'Continent': ['Asia', 'Asia', 'North America', 'Asia', 'Asia',
                  'South America', 'Africa', 'Asia', 'Europe', 'North America']
}

df = pd.DataFrame(population_data)

# Initialize the Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("World Population Dashboard", style={'textAlign': 'center'}),
    
    html.Div([
        html.Div([
            dcc.Dropdown(
                id='continent-filter',
                options=[{'label': 'All Continents', 'value': 'All'}] + 
                        [{'label': cont, 'value': cont} for cont in df['Continent'].unique()],
                value='All',
                clearable=False,
                style={'width': '100%'}
            )
        ], style={'width': '30%', 'display': 'inline-block', 'padding': '10px'}),
        
        html.Div([
            dcc.RadioItems(
                id='population-year',
                options=[
                    {'label': '2020 Population', 'value': 'Population_2020'},
                    {'label': '2023 Population', 'value': 'Population_2023'}
                ],
                value='Population_2023',
                inline=True,
                style={'padding': '10px'}
            )
        ], style={'width': '65%', 'display': 'inline-block', 'textAlign': 'center'})
    ], style={'display': 'flex', 'borderBottom': 'thin lightgrey solid'}),
    
    html.Div([
        html.Div([
            dcc.Graph(id='population-bar-chart')
        ], style={'width': '48%', 'display': 'inline-block', 'padding': '10px'}),
        
        html.Div([
            dcc.Graph(id='population-pie-chart')
        ], style={'width': '48%', 'display': 'inline-block', 'padding': '10px'})
    ], style={'display': 'flex'}),
    
    html.Div([
        dcc.Graph(id='growth-rate-chart')
    ], style={'width': '98%', 'padding': '10px'}),
    
    html.Div([
        dcc.Graph(id='population-trend-chart')
    ], style={'width': '98%', 'padding': '10px'})
])

# Callback for updating charts based on filters
@app.callback(
    [Output('population-bar-chart', 'figure'),
     Output('population-pie-chart', 'figure'),
     Output('growth-rate-chart', 'figure'),
     Output('population-trend-chart', 'figure')],
    [Input('continent-filter', 'value'),
     Input('population-year', 'value')]
)
def update_charts(selected_continent, selected_year):
    # Filter data based on continent selection
    if selected_continent == 'All':
        filtered_df = df
    else:
        filtered_df = df[df['Continent'] == selected_continent]
    
    # Sort by selected population year
    filtered_df = filtered_df.sort_values(by=selected_year, ascending=False)
    
    # 1. Bar Chart - Population by Country
    bar_fig = px.bar(
        filtered_df,
        x='Country',
        y=selected_year,
        title=f'Population by Country ({selected_year.replace("_", " ")})',
        color='Continent',
        labels={selected_year: 'Population'}
    )
    bar_fig.update_layout(transition_duration=500)
    
    # 2. Pie Chart - Population Distribution
    pie_fig = px.pie(
        filtered_df,
        names='Country',
        values=selected_year,
        title=f'Population Distribution ({selected_year.replace("_", " ")})',
        hole=0.3
    )
    pie_fig.update_traces(textposition='inside', textinfo='percent+label')
    
    # 3. Growth Rate Chart
    growth_fig = px.bar(
        filtered_df,
        x='Country',
        y='Growth_Rate',
        title='Population Growth Rate (%)',
        color='Growth_Rate',
        color_continuous_scale='RdYlGn',
        range_color=[-1, 3]
    )
    growth_fig.update_layout(coloraxis_colorbar=dict(title="Growth Rate"))
    
    # 4. Population Trend Chart
    trend_fig = go.Figure()
    
    for country in filtered_df['Country']:
        country_data = df[df['Country'] == country]
        trend_fig.add_trace(go.Scatter(
            x=['2020', '2023'],
            y=[country_data['Population_2020'].values[0], country_data['Population_2023'].values[0]],
            mode='lines+markers',
            name=country
        ))
    
    trend_fig.update_layout(
        title='Population Trend (2020 vs 2023)',
        xaxis_title='Year',
        yaxis_title='Population',
        hovermode='closest'
    )
    
    return bar_fig, pie_fig, growth_fig, trend_fig

if __name__ == '__main__':
    app.run_server(debug=True)
